{{extend 'layout.html'}}
{{import datetime}}

<head>
    <style>
          /* Always set the map height explicitly to define the size of the div
           * element that contains the map. */
          #map-canvas {
            height: 600;
          }
          /* Optional: Makes the sample page fill the window. */
          html, body {
            height: 600;
            margin: 35px 0;
            padding: 0;
          }
    </style>

    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&key=AIzaSyCkmDp5cxkybaMIT-XLhjKZPFXEkoIF7Wc"></script>

    {{response.files.insert(0,URL('static','js/xterm.css',scheme='https'))}}
    {{response.files.insert(1,URL('static','js/xterm.js',scheme='https'))}}
    {{response.files.insert(2,URL('static','js/jquery.js',scheme='https'))}}
    {{response.files.insert(3,URL('static','css/calendar.css',scheme='https'))}}
    {{response.files.insert(4,URL('static','js/calendar.js',scheme='https'))}}
    {{response.files.insert(5,URL('static','js/web2py.js',scheme='https'))}}
    {{response.files.insert(6,URL('static','js/nearley.js',scheme='https'))}}
    {{response.files.insert(7,URL('static','js/grammar.js',scheme='https'))}}
    {{response.include_meta()}}
    {{response.include_files()}}

    <script>
        var term = new Terminal( { cursorBlink: true, cols: 180, rows: 4 } );
        term.open(document.getElementById('#terminal'),true);
    </script>

</head>

<body>

    <form>
        <input type="text" id="aUsername" name="aUsername" style="display:none">
        <input type="text" id="aSnif" name="aSnif" style="display:none"></input>
        <div id="target"  style="display:none"></div>
        <INPUT id="aPeriod" name="aPeriod" style="display:none"></INPUT>
        <input type="text" id="Snifftarget" name="Snifftarget" style="display:none"></input>
    </form>
    <select name="thePeriod" id="thePeriod" onchange="setMessageWaiting()" style="display:none">
        <option value="{{="FROM="+datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}}">A partir de: {{=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}}</option>
        <option value="1H">Afficher mon traffic depuis 1H</option>
        <option value="TODAY">Afficher mon traffic aujourd'hui</option>
        <option value="30D">Afficher mon traffic ce mois-ci</option>
        <option value="YEAR">Afficher mon traffic cette année</option>
    </select>

    <LABEL id="aLabelSniff" style="font-size:10px; margin.top=10px">Paquets=</LABEL><INPUT id="counterSniff" style="font-size:10px; text-align:center; width: 40px; readonly" ></INPUT>
    <LABEL id="aLabelErr=" style="font-size:10px; margin.top=10px; display:none">Err=</LABEL><INPUT id="counterErr" style="font-size:10px; text-align:center; width: 50px; readonly; display:none" ></INPUT>
    <LABEL id="aLabelSVR" style="font-size:10px; margin.top=10px">IP=</LABEL><INPUT id="counterSVR" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelIP4" style="font-size:10px; margin.top=10px">Paq4=</LABEL><INPUT id="counterIP4" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelIP6" style="font-size:10px; margin.top=10px">paq6=</LABEL><INPUT id="counterIP6" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelTCP" style="font-size:10px; margin.top=10px">TCP=</LABEL><INPUT id="counterTCP" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelUDP" style="font-size:10px; margin.top=10px">UDP=</LABEL><INPUT id="counterUDP" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelIGMP" style="font-size:10px; margin.top=10px">IGMP=</LABEL><INPUT id="counterIGMP" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelSSCO" style="font-size:10px; margin.top=10px">SSCO=</LABEL><INPUT id="counterSSCO" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelICMP" style="font-size:10px; margin.top=10px">ICMP=</LABEL><INPUT id="counterICMP" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelU" style="font-size:10px; margin.top=10px">URG=</LABEL><INPUT id="counterU" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelU" style="font-size:10px; margin.top=10px">ACK=</LABEL><INPUT id="counterA" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelU" style="font-size:10px; margin.top=10px">PUS=</LABEL><INPUT id="counterP" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelU" style="font-size:10px; margin.top=10px">RST=</LABEL><INPUT id="counterR" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelU" style="font-size:10px; margin.top=10px">SYN=</LABEL><INPUT id="counterS" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelU" style="font-size:10px; margin.top=10px">FIN=</LABEL><INPUT id="counterF" style="font-size:10px; text-align:center; width: 30px; readonly" ></INPUT>
    <LABEL id="aLabelIn" style="font-size:10px; margin.top=10px">IN</LABEL><INPUT id="counterIN" style="font-size:10px; text-align:center; width: 60px; readonly" ></INPUT>
    <LABEL id="aLabelOut" style="font-size:10px; margin.top=10px">OUT</LABEL><INPUT id="counterOUT" style="font-size:10px; text-align:center; width: 60px; readonly" ></INPUT>
    <LABEL id="aLabel=" style="font-size:10px; margin.top=10px; display:none"></LABEL>
    <br/>
    <LABEL id="aLabelCopyData" style="color:green; font-size:12px; margin.top=10px">Cochez la case à droite pour envoyer une copie de votre traffic réseau vers le site Web BEEWOO (puis analyse type Machine Learning) >>></LABEL><INPUT type="checkbox" id="CopyDataToWeb" style="font-size:10px; text-align:center; width: 100px; readonly" onclick="setRedColor()"></INPUT>

<table style="width: 100%;">
    <tr>
        <div id="terminal"></div>
    </tr>
    <tr style="width: 100%;">
        <td width="80%">
        <div id="map-canvas" style="width: 100%; height:600px;"></div>
        </td>
        <td width="20%">
            <div style="width: 100%; height:400px;">
                <LABEL color="green" style="font-size:10px; vertical-align: top; ">
                    Serveurs autorisés ? (RGPD regulation):
                </LABEL>
                <SELECT id='list_push' size="10" style="width: 100%; height:400px;">
                </SELECT>
            </div>
            <div style="width: 100%; height:100%;">
                <LABEL color="yellow" style="font-size:10px; vertical-align: top; ">
                    Hackers !!!:
                </LABEL>
                <SELECT id='list_pushBanned' size="10" style="width: 100%; height:100%;">
                </SELECT>
            </div>
        </td>
    </tr>
</table>

    <script type="text/javascript">
        function ip2int(ip) {
            return ip.split('.').reduce(function(ipInt, octet) { return (ipInt<<8) + parseInt(octet, 10)}, 0) >>> 0;
        };

        function int2ip (ipInt) {
            return ( (ipInt>>>24) +'.' + (ipInt>>16 & 255) +'.' + (ipInt>>8 & 255) +'.' + (ipInt & 255) );
        };

        function setRedColor()
        {
            if (document.querySelector('#CopyDataToWeb').checked)
            {
                jQuery('#aLabelCopyData').text("ATTENTION: votre traffic Internet est maintenant enregistré sur le site Web www.beewoo.fr pour analyse !!!").css('color', 'red');

                clearInterval(mainTimer);
            }
            else
            {
                jQuery('#aLabelCopyData').text("Cochez la case à droite pour envoyer une copie de votre traffic réseau vers le site Web BEEWOO (puis analyse type Machine Learning) >>>").css('color', 'green');

                //mainTimer = window.setInterval( function() {
                //    aString = jQuery('#target').text();
                //    //console.log("ajax return = '" + aString + "'");
                //    if ((aString.length > 0) && (aString != 'None'))
                //    {
                //        jQuery('#aLabelSniff').text("Packets=").css('color', 'black');
                //        jQuery('#list_push').empty();
                //        jQuery('#list_pushBanned').empty();
                //        var aList = JSON.parse( aString);
                //        addListMarks( aList);
                //    }
                //
                //    jQuery('#aUsername').val("{{=auth.user.email}}");
                //    var x = jQuery('#thePeriod').val();
                //    jQuery('#aPeriod').val(x);
                //    //console.log("ajax call = GetListMarkers() '" + "{{=auth.user.email}}" + "' - '" + jQuery('#aPeriod').val() + "'");
                //    ajax('{{=URL('othsec', 'GetListMarkers')}}', ['aUsername','aPeriod'], 'target');
                //}, 2000);
            }
        };

        function setMessageWaiting()
        {
            jQuery('#aLabel').text("Chargement des données en cours, veuillez patienter !!!").css('color', 'red');
        };

        (function()
        {
            var xTermColor = '';
            var xTermRed = '\u001b[31m';
            var xTermWhite = '\u001b[39m';
            var map;
            var mainTimer;
            var mapOptions;
            var myLatlng;
            var marker;
            var i = 0;
            var gNbErr = 0;
            var gNbSniff = 0;
            var gNbIP4 = 0;
            var gNbIP6 = 0;
            var gNbTCP = 0;
            var gNbUDP = 0;
            var gNbIGMP = 0;
            var gNbSSCO = 0;
            var gNbICMP = 0;
            var gNbU = 0;
            var gNbA = 0;
            var gNbP = 0;
            var gNbR = 0;
            var gNbS = 0;
            var gNbF = 0;
            var gNbIN = 0;
            var gNbOUT = 0;
            var gLstIPs = [];
            var sizeico = 20;
            var imageHacked = {
                    url: "https://maps.google.com/mapfiles/kml/pal3/icon47.png",
                    scaledSize: new google.maps.Size(sizeico, sizeico),
                    anchor: new google.maps.Point(sizeico/2, sizeico/2)
                };
            var imageNormal = {
                    url: "http://labs.google.com/ridefinder/images/mm_20_green.png",
                    size: new google.maps.Size(sizeico, sizeico),
                    anchor: new google.maps.Point(sizeico/2, sizeico/2)
                };
            var regexTCP = RegExp('([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) (\\S+) (\\S+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) (-|U|A|P|R|S|F) (-|U|A|P|R|S|F) (-|U|A|P|R|S|F) (-|U|A|P|R|S|F) (-|U|A|P|R|S|F) (-|U|A|P|R|S|F)','');

            var analyzePaquet = function(ldata)
            {
                var parseTxt;
                if (ldata)
                {
                    try {
                        parseTxt = regexTCP.exec(ldata);

                        if (parseTxt)
                        {
                            // VERSION
                            if (parseTxt[2].localeCompare('4') == 0)
                            {
                                gNbIP4++;
                                jQuery('#counterIP4').val(gNbIP4.toString());
                            }
                            else
                            if (parseTxt[2].localeCompare('6') == 0)
                            {
                                gNbIP6++;
                                jQuery('#counterIP6').val(gNbIP6.toString());
                            };

                            // PROTOCOL = 6 TCP
                            if (parseTxt[9].localeCompare('6') == 0)
                            {
                                gNbTCP++;
                                jQuery('#counterTCP').val(gNbTCP.toString());

                                // FLAGS
                                //console.log("FLAGS = " + parseTxt[18].toString() +":" + parseTxt[19].toString() +":" + parseTxt[20].toString() +":" + parseTxt[21].toString() +":");
                                if (parseTxt[18].localeCompare('U') == 0)
                                {
                                    gNbU++;
                                    jQuery('#counterU').val(gNbU.toString());
                                }
                                if (parseTxt[19].localeCompare('A') == 0)
                                {
                                    gNbA++;
                                    jQuery('#counterA').val(gNbA.toString());
                                }
                                if (parseTxt[20].localeCompare('P') == 0)
                                {
                                    gNbP++;
                                    jQuery('#counterP').val(gNbP.toString());
                                }
                                if (parseTxt[21].localeCompare('R') == 0)
                                {
                                    gNbR++;
                                    jQuery('#counterR').val(gNbR.toString());
                                }
                                if (parseTxt[22].localeCompare('S') == 0)
                                {
                                    gNbS++;
                                    jQuery('#counterS').val(gNbS.toString());
                                }
                                if (parseTxt[23].localeCompare('F') == 0)
                                {
                                    gNbF++;
                                    jQuery('#counterF').val(gNbF.toString());
                                }
                            }
                            else
                            // PROTOCOL = 17 UDP
                            if (parseTxt[9].localeCompare('17') == 0)
                            {
                                gNbUDP++;
                                jQuery('#counterUDP').val(gNbUDP.toString());
                            }
                            else
                            // PROTOCOL = 1 ICMP
                            if (parseTxt[9].localeCompare('1') == 0)
                            {
                                gNbICMP++;
                                jQuery('#counterICMP').val(gNbICMP.toString());
                            }
                            else
                            // PROTOCOL = 1 IGMP
                            if (parseTxt[9].localeCompare('2') == 0)
                            {
                                gNbIGMP++;
                                jQuery('#counterIGMP').val(gNbIGMP.toString());
                            }
                            else
                            // PROTOCOL = 128 SSCOPMCE
                            if (parseTxt[9].localeCompare('128') == 0)
                            {
                                gNbSSCOPMCE++;
                                jQuery('#counterSSCO').val(gNbSSCO.toString());
                            }

                            var IPS = parseTxt[11].toString();
                            var IPD = parseTxt[12].toString();

                            // IP SOURCE
                            if( gLstIPs.indexOf(IPS.toString()) < 0 )
                            {
                                if ((IPS.search('192.168') == -1) && (IPS.search('10.') == -1) && (IPS.search('172.16') == -1) && (IPS.search('255.255') == -1) && (IPS.search('0.0') == -1))
                                {
                                    gLstIPs.push(IPS.toString());
                                    $.getJSON('https://ipapi.co/'+IPS.toString()+'/json', function(data){ var lon = new String(data.longitude); var lat = new String(data.latitude); addMarkOrg(lat, lon, IPS.toString(), data.org); });
                                }
                            }
                            // IP DESTINATION
                            if( gLstIPs.indexOf(IPD.toString()) < 0 )
                            {
                                if ((IPD.search('192.168') == -1) && (IPD.search('10.') == -1) && (IPD.search('172.16') == -1) && (IPD.search('255.255') == -1) && (IPD.search('0.0') == -1))
                                {
                                    gLstIPs.push(IPD.toString());
                                    $.getJSON('https://ipapi.co/'+IPD.toString()+'/json', function(data){ var lon = new String(data.longitude); var lat = new String(data.latitude); addMarkOrg(lat, lon, IPD.toString(), data.org); });
                                }
                            }
                            jQuery('#counterSVR').val(gLstIPs.length.toString());
                            //console.log("IPs = " + parseTxt[11].toString() +":" + parseTxt[12].toString());

                            // SUM TRAFFIC IN & OUT
                            if (parseTxt[5])
                            {
                                var sizeTCP = Number(parseTxt[5]);

                                // Count only traffic from local source to internet destination
                                if (((IPS.search('192.168') >= 0) || (IPS.search('10.') >= 0) || (IPS.search('172.16') >= 0)) && ((IPD.search('192.168') < 0) && (IPD.search('10.') < 0) && (IPD.search('172.16') < 0)))
                                {
                                    gNbOUT += Number(parseTxt[5]);
                                    if (gNbOUT <= 999999)
                                    {
                                        gNbKM = gNbOUT / 1024;
                                        jQuery('#counterOUT').val(gNbKM.toFixed(1).toString());
                                        jQuery('#aLabelOut').text("OUT Kb");
                                    }
                                    else
                                    {
                                        gNbKM = gNbOUT / 1024 / 1024;
                                        jQuery('#counterOUT').val(gNbKM.toFixed(1).toString());
                                        jQuery('#aLabelOut').text("OUT Mb");
                                    }
                                }
                                // Count only traffic from internet source to local destination
                                if (((IPD.search('192.168') >= 0) || (IPD.search('10.') >= 0) || (IPD.search('172.16') >= 0)) && ((IPS.search('192.168') < 0) &&(IPS.search('10.') < 0) && (IPS.search('172.16') < 0)))
                                {
                                    gNbIN += Number(parseTxt[5]);
                                    if (gNbIN <= 999999)
                                    {
                                        gNbKM = gNbIN / 1024;
                                        jQuery('#counterIN').val(gNbKM.toFixed(1).toString());
                                        jQuery('#aLabelIn').text("IN Kb");
                                    }
                                    else
                                    {
                                        gNbKM = gNbIN / 1024 / 1024;
                                        jQuery('#counterIN').val(gNbKM.toFixed(1).toString());
                                        jQuery('#aLabelIn').text("IN Mb");
                                    }
                                }
                            }
                        }
                        else
                        {
                            gNbErr++;
                            jQuery('#counterErr').val(gNbErr.toString());
                            console.log("ERROR: unable to parse data = " + ldata);
                        }
                    }
                    catch(error) {
                        gNbErr++;
                        jQuery('#counterErr').val(gNbErr.toString());
                        console.error("ERROR: unable to parse data = " + ldata);
                    }

                }
            };


            function sleep(seconds){
                var waitUntil = new Date().getTime() + seconds*1000;
                while(new Date().getTime() < waitUntil) true;
            }

            function addMark(lon, lat, IP_addr, IsBanned)
            {
                 if ( (lat != 0) || (lon != 0) ) {
                     if (IsBanned > 0) {
                         image = imageHacked;
                         jQuery('#list_pushBanned').append('<OPTION>'+IP_addr+'</OPTION>');
                     }
                     else
                     {
                         image = imageNormal;
                         jQuery('#list_push').append('<OPTION>'+IP_addr+'</OPTION>');
                     }
                     var marker = new google.maps.Marker({ position: new google.maps.LatLng( lon, lat), map:map, title: IP_addr, icon: image});
                 }
            };

            function addMarkOrg(lon, lat, IP_addr, Orga)
            {
                 if ( (lat != 0) || (lon != 0) )
                 {
                         image = imageNormal;
                         jQuery('#list_push').append('<OPTION>'+ IP_addr +'('+ Orga +')'+'</OPTION>');
                 }
                 var marker = new google.maps.Marker({ position: new google.maps.LatLng( lon, lat), map:map, title: IP_addr, icon: image});
            };

            function addListMarks(lst_IP)
            {
                 i = i + 1;
                 //console.log("Nbr elem=" + lst_IP.length);
                 jQuery('#counter').val(lst_IP.length.toString());
                 lst_IP.forEach(function(element) {
                      addMark(element[0], element[1], element[2], element[3]);
                      //console.log("IP elem=" + element[2]);
                    });

            };

            function initialize()
            {
                myLatLng = new google.maps.LatLng(48.856614, 2.3522219);
                mapOptions = { zoom: 2, minZoom: 2, center: myLatLng };
                i = 0;

                map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
            };

            var httpsEnabled = window.location.protocol === "https:",
                url = (httpsEnabled ? 'wss://localhost:20508/sniffer' : 'ws://localhost:20508/sniffer'),
                authToken = (typeof tty_auth_token !== 'undefined') ? tty_auth_token : null,
                protocols = ["tty"], autoReconnect = 3, pingTimer, reconnectTimer = 0, wsError;

            term.write('Tentative de connection avec le sniffer OTHSEC (dotnet othsec.dll) en local sur votre PC ...\n\r');

            var openWs = function()
            {

                var ws = new WebSocket(url, protocols),
                    textDecoder = new TextDecoder(),
                    textEncoder = new TextEncoder();

                var unloadCallback = function(event)
                {
                    var message = 'Fermer le terminal? cela terminera également le sniffer en local.';
                    (event || window.event).returnValue = message;

                    return message;
                };

                var sendMessage = function (msg)
                {
                    if (ws.readyState === WebSocket.OPEN)
                    {
                        ws.send(textEncoder.encode(msg));
                    }
                };

                var sendPing = function()
                {
                    sendMessage("1");
                };

                ws.binaryType = 'arraybuffer';

                ws.onopen = function()
                {
                    var terminalContainer = document.getElementById('#terminal');
                    wsError = false;
                    sendMessage(JSON.stringify({AuthToken: authToken}));
                    pingTimer = setInterval(sendPing, 30 * 1000);

                    term.write('Connection Websocket ouverte !\n\r');
                    console.log("Connection Websocket ouverte !");

                    jQuery('#aLabel').text("Chargement des données en cours, veuillez patienter !!!").css('color', 'red');

                    term.on('resize', function(size)
                    {
                        sendMessage("2" + JSON.stringify({columns: size.cols, rows: size.rows}));
                        setTimeout(function()
                        {
                            term.showOverlay(size.cols + 'x' + size.rows);
                        }, 500);
                    });

                    term.on("data", function(data)
                    {
                        sendMessage("0" + data);
                    });

                    term.on('open', function()
                    {
                        // https://stackoverflow.com/a/27923937/1727928
                        window.addEventListener('resize', function()
                        {
                            clearTimeout(window.resizedFinished);
                            window.resizedFinished = setTimeout(function ()
                            {
                                term.fit();
                            }, 250);
                        });
                        window.addEventListener('beforeunload', unloadCallback);
                        term.fit();
                    });

                    while (terminalContainer.firstChild)
                    {
                        terminalContainer.removeChild(terminalContainer.firstChild);
                    }

                    term.open(terminalContainer, true);
                };

                ws.onmessage = function(event)
                {
                    var cmd = String.fromCharCode(new DataView(event.data).getUint8()),
                    data = textDecoder.decode(event.data.slice(1));
                    switch(cmd)
                    {
                        case '0':
                           {
                                term.write(data);
                                gNbSniff = gNbSniff + 1;
                                jQuery('#counterSniff').val(gNbSniff);

                                analyzePaquet(data);

                                if (document.querySelector('#CopyDataToWeb').checked)
                                {
                                    jQuery('#aSnif').val(data);
                                    jQuery('#aUsername').val("{{=auth.user.email}}");
                                    ajax('{{=URL('othsec', 'InsertSnifInDB')}}', ['aSnif','aUsername']);
                                }
                           }
                            break;
                        case '1': // pong
                            break;
                        case '2':
                            document.title = data;
                            break;
                        case '3':
                            var preferences = JSON.parse(data);
                            Object.keys(preferences).forEach(function(key)
                            {
                                console.log("Setting " + key + ": " +  preferences[key]);
                                term.setOption(key, preferences[key]);
                            });
                            break;
                        case '4':
                            autoReconnect = JSON.parse(data);
                            console.log("Enabling reconnect: " + autoReconnect + " seconds");
                            break;
                    }
                };

                ws.onclose = function(event)
                {
                    console.log("Websocket connection closed with code: " + event.code);
                    if (term)
                    {
                        term.off('data');
                        term.off('resize');
                        if (!wsError)
                        {
                            term.off('data');
                            term.off('resize');
                            if (!wsError)
                            {
                                term.write("ERROR: Connection impossible... Lancez OTHSEC sur votre PC (dotnet othsec.dll) !!!\n\r");
                                reconnectTimer = setTimeout(openWs, autoReconnect * 1000);
                            }
                            clearInterval(mainTimer);
                            removeEventListener('beforeunload', unloadCallback);
                            clearInterval(pingTimer);
                        }
                    }
                    // 1000: CLOSE_NORMAL
                    if (event.code !== 1000 && autoReconnect > 0)
                    {
                        setTimeout(openWs, autoReconnect * 1000);
                    }
                };
            };

            google.maps.event.addDomListener(window, 'load', initialize());
            openWs();
        })();
    </script>
</body>
